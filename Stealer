-- Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

-- ========== CONFIGURATIONS (Easy Access) ==========
local DEBUG = false  -- Set to true to enable debug messages
local baseTpAmt = 70  -- Base teleport amount, will be updated by ping calculation
local void = CFrame.new(0, -1000, 0)  -- Enhanced void position
local voidTeleports = 2  -- Number of void teleports
local insideOffset = Vector3.new(0, 5, 0)  -- Removed (was for inside teleport)
local descentHeight = 3  -- Start 3 studs above and descend exactly 3 studs
-- ================================================

-- Player setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Internal variables
local teleporting = false
local random = Random.new()
local tpAmt = baseTpAmt  -- Dynamic teleport amount

-- Debug function
local function DebugInfo(mode, content, value)
    if not DEBUG then return end
    if mode == "warn" then
        warn("[TeleportHub DEBUG]:", content, value or "")
    elseif mode == "print" then
        print("[TeleportHub DEBUG]:", content, value or "")
    else
        warn("[TeleportHub DEBUG]: Invalid debug type.")
    end
end

-- Character setup function
local function SetupCharacter()
    character = player.Character or player.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    hrp = character:WaitForChild("HumanoidRootPart")
    DebugInfo("print", "Character setup completed for", player.Name)
end

-- Calculate tpAmt from Latency (Dynamic Ping System)
task.spawn(function()
    while true do
        local ping = player:GetNetworkPing() * 1000
        tpAmt = math.clamp(math.floor(ping * 0.8), 10, 150)
        DebugInfo("print", "Ping: " .. math.floor(ping) .. "ms | tpAmt:", tpAmt)
        RunService.Heartbeat:Wait()
    end
end)

-- Enhanced teleport function
local function TP(position)
    if not teleporting then
        teleporting = true
        if typeof(position) == "CFrame" then
            hrp.CFrame = position + Vector3.new(
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001),
                random:NextNumber(-0.0001, 0.0001)
            )
            RunService.Heartbeat:Wait()
            teleporting = false
        end
    else
        DebugInfo("warn", "You are already teleporting", "teleporting")
    end
end

-- Enhanced delivery function with success verification
local function FindDelivery()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then
        DebugInfo("warn", "Plots folder not found in workspace", nil)
        return
    end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox then 
                    DebugInfo("print", "Found delivery hitbox in player's plot", hitbox)
                    return hitbox 
                end
            end
        end
    end
    DebugInfo("warn", "No valid DeliveryHitbox found", nil)
end



-- Find nearest base function (from second script)
local function FindNearestBase()
    local plotsFolder = workspace:FindFirstChild("Plots")
    if not plotsFolder then
        DebugInfo("warn", "Missing folder", "Plots")
        return nil
    end

    local closestPodium = nil
    local shortestDistance = math.huge

    for _, plot in pairs(plotsFolder:GetChildren()) do
        local plotSign = plot:FindFirstChild("PlotSign")
        if plotSign then
            local plotSignText = plotSign:FindFirstChild("SurfaceGui"):FindFirstChild("Frame"):FindFirstChild("TextLabel")
            if plotSignText and plotSignText.ContentText ~= "Empty Base" then
                local yourBase = plotSign:FindFirstChild("YourBase")
                if yourBase and not yourBase.Enabled then
                    local podiums = plot:FindFirstChild("AnimalPodiums")
                    if podiums then
                        for _, brainrot in pairs(podiums:GetChildren()) do
                            if brainrot:IsA("Model") and brainrot:FindFirstChild("Base"):FindFirstChild("Spawn") then
                                local brainrotSpawn = brainrot.Base.Spawn
                                local distance = (brainrotSpawn.Position - hrp.Position).Magnitude
                                if distance < shortestDistance then
                                    shortestDistance = distance
                                    closestPodium = brainrotSpawn
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    if closestPodium then
        DebugInfo("print", "Nearest podium found", closestPodium)
    else
        DebugInfo("warn", "No valid podium found", nil)
    end

    return closestPodium
end

-- Enhanced teleport function with success verification
local function EnhancedTeleport(target, statusLabel, teleportType)
    if not target then
        if statusLabel then
            statusLabel.Text = "Target not found"
        end
        return false
    end
    
    if statusLabel then
        statusLabel.Text = "Teleporting..."
    end
    
    -- Phase 1: Main teleport sequence (using dynamic tpAmt)
    local currentTpAmt = tpAmt or baseTpAmt
    local i = 0
    while i < currentTpAmt do
        TP(target)
        i = i + 1
    end
    
    -- Phase 2: Void teleportation (anti-detection)
    for _ = 1, voidTeleports do
        TP(void)
    end
    
    -- Phase 3: Final positioning teleports
    i = 0
    while i < math.floor(currentTpAmt / 16) do
        TP(target)
        i = i + 1
    end
    
    -- Wait and verify success
    task.wait(1)
    local distance = (hrp.Position - target.Position).Magnitude
    local success = distance <= 30
    
    if statusLabel then
        if success then
            statusLabel.Text = teleportType .. " complete!"
            DebugInfo("print", "Teleport succeeded", distance)
        else
            statusLabel.Text = teleportType .. " failed (distance: " .. math.floor(distance) .. ")"
            DebugInfo("warn", "Teleport failed", distance)
        end
    end
    
    return success
end

-- Main delivery teleport function (Original Method)
local function DeliverBrainrot(statusLabel)
    local hitbox = FindDelivery()
    if not hitbox then 
        if statusLabel then
            statusLabel.Text = "No delivery box found"
        end
        return 
    end
    
    local target = hitbox.CFrame * CFrame.new(0, -3, 0)
    
    if statusLabel then
        statusLabel.Text = "Teleporting to delivery..."
    end
    
    -- Phase 1: Gradual descent teleportation to target (Original Method)
    local currentTpAmt = tpAmt or baseTpAmt
    local descentPerTeleport = descentHeight / currentTpAmt  -- Descend exactly 3 studs over all teleports
    
    for i = 1, currentTpAmt do
        local currentHeight = descentHeight - (descentPerTeleport * (i - 1))
        local currentTarget = target + Vector3.new(0, currentHeight, 0)
        TP(currentTarget)
    end
    
    -- Phase 2: Void teleportation (anti-detection)
    for _ = 1, voidTeleports do
        TP(void)
    end
    
    -- Phase 3: Final positioning teleports
    for i = 1, math.floor(currentTpAmt / 16) do
        TP(target)
    end
    
    if statusLabel then
        statusLabel.Text = "Delivery complete"
    end
end



-- Nearest base teleport function
local function TeleportNearestBase(statusLabel)
    local closestPodium = FindNearestBase()
    if not closestPodium then
        if statusLabel then
            statusLabel.Text = "No valid podium found"
        end
        return
    end
    
    local target = closestPodium.CFrame * CFrame.new(0, 2, 0)
    EnhancedTeleport(target, statusLabel, "Nearest base")
end

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DeliveryGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Main Frame (adjusted height for third button)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 140, 0, 100)
mainFrame.Position = UDim2.new(0, 50, 0, 50)
mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Add corner rounding
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 4)
corner.Parent = mainFrame

-- Title Label
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, 0, 0, 20)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Enhanced Teleport Hub"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextScaled = true
titleLabel.Font = Enum.Font.GothamBold
titleLabel.Parent = mainFrame

-- Status Label
local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(1, -10, 0, 15)
statusLabel.Position = UDim2.new(0, 5, 0, 25)
statusLabel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
statusLabel.Text = "Ready"
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
statusLabel.TextScaled = true
statusLabel.Font = Enum.Font.Gotham
statusLabel.Parent = mainFrame

-- Status label corner
local statusCorner = Instance.new("UICorner")
statusCorner.CornerRadius = UDim.new(0, 2)
statusCorner.Parent = statusLabel

-- Delivery Button
local deliveryButton = Instance.new("TextButton")
deliveryButton.Name = "DeliveryButton"
deliveryButton.Size = UDim2.new(1, -10, 0, 18)
deliveryButton.Position = UDim2.new(0, 5, 0, 45)
deliveryButton.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
deliveryButton.Text = "Delivery"
deliveryButton.TextColor3 = Color3.fromRGB(255, 255, 255)
deliveryButton.TextScaled = true
deliveryButton.Font = Enum.Font.GothamBold
deliveryButton.Parent = mainFrame

-- Delivery button corner
local deliveryCorner = Instance.new("UICorner")
deliveryCorner.CornerRadius = UDim.new(0, 3)
deliveryCorner.Parent = deliveryButton



-- Nearest Base Button
local nearestButton = Instance.new("TextButton")
nearestButton.Name = "NearestButton"
nearestButton.Size = UDim2.new(1, -10, 0, 18)
nearestButton.Position = UDim2.new(0, 5, 0, 68)
nearestButton.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
nearestButton.Text = "Nearest Base"
nearestButton.TextColor3 = Color3.fromRGB(255, 255, 255)
nearestButton.TextScaled = true
nearestButton.Font = Enum.Font.GothamBold
nearestButton.Parent = mainFrame

-- Nearest button corner
local nearestCorner = Instance.new("UICorner")
nearestCorner.CornerRadius = UDim.new(0, 3)
nearestCorner.Parent = nearestButton

-- Button hover effects for delivery
deliveryButton.MouseEnter:Connect(function()
    deliveryButton.BackgroundColor3 = Color3.fromRGB(0, 140, 220)
end)

deliveryButton.MouseLeave:Connect(function()
    deliveryButton.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
end)



-- Button hover effects for nearest base
nearestButton.MouseEnter:Connect(function()
    nearestButton.BackgroundColor3 = Color3.fromRGB(230, 120, 0)
end)

nearestButton.MouseLeave:Connect(function()
    nearestButton.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
end)

-- Mobile-friendly dragging system
local dragging = false
local dragStart = nil
local startPos = nil

local function updateDrag(input)
    if dragging then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end

-- Handle both mouse and touch input
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        updateDrag(input)
    end
end)

mainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Additional mobile support using UserInputService
UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        updateDrag(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Button click handlers
deliveryButton.MouseButton1Click:Connect(function()
    DeliverBrainrot(statusLabel)
end)



nearestButton.MouseButton1Click:Connect(function()
    TeleportNearestBase(statusLabel)
end)

-- Character respawn handling
player.CharacterAdded:Connect(function(newCharacter)
    SetupCharacter()
end)

print("Enhanced Teleport Hub loaded!")
print("Features: Dynamic ping-based teleportation, success verification, nearest base targeting")
print("Set DEBUG = true in the script to enable debug messages")
